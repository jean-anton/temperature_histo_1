import 'package:flutter/material.dart';
import 'package:syncfusion_flutter_charts/charts.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:temperature_histo_1/services/climate_data_service.dart';
import 'package:temperature_histo_1/services/weather_service.dart';

import 'models/weather_forecast_model.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Weather Chart App',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: const WeatherChartPage(),
    );
  }
}

class WeatherChartPage extends StatefulWidget {
  const WeatherChartPage({super.key});

  @override
  State<WeatherChartPage> createState() => _WeatherChartPageState();
}

class _WeatherChartPageState extends State<WeatherChartPage> {
  late List<WeatherForecast> data;
  late TooltipBehavior _tooltip;

  final WeatherService _weatherService = WeatherService();
  final ClimateDataService _climateService = ClimateDataService();

  // String _selectedLocation = '00460_Berus';
  String _selectedLocation = '04336_Saarbrücken-Ensheim';
  String _selectedModel = 'best_match';
  WeatherForecast? _forecast;
  List<ClimateNormal> _climateNormals = [];
  bool _isLoading = false;
  String? _errorMessage;
  bool _showChart = true;

  final Map<String, String> _locations = {
    '00460_Berus': 'Berus',
    '04336_Saarbrücken-Ensheim': 'Saarbrücken-Ensheim',
  };

  final Map<String, String> _models = {
    'best_match': 'Best Match',
    'ecmwf_ifs025': 'ECMWF IFS',
    'gfs_seamless': 'GFS',
    'meteofrance_seamless': 'ARPEGE',
    'icon_seamless': 'ICON/DWD',
  };

  final Map<String, Map<String, double>> _locationCoordinates = {
    '00460_Berus': {'lat': 49.2656, 'lon': 6.6942},
    '04336_Saarbrücken-Ensheim': {'lat': 49.21, 'lon': 7.11},
  };

  @override
  Future<void> initState() async {
    super.initState();
    // data = getWeatherForecast();
    final WeatherForecast forecast = await _weatherService.getWeatherForecast(
      latitude: coords['lat']!,
      longitude: coords['lon']!,
      model: _selectedModel,
      locationName: _locations[_selectedLocation]!,

    );
    _tooltip = TooltipBehavior(
      enable: true,
      // Make the tooltip container transparent since we provide our own styled container
      color: Colors.transparent,
      elevation: 0,
      builder: (dynamic data, dynamic point, dynamic series, int pointIndex,
          int seriesIndex) {
        final weather = data as WeatherForecast;
        return Container(
          padding: const EdgeInsets.all(10),
          decoration: BoxDecoration(
            color: Colors.black87,
            borderRadius: BorderRadius.circular(8),
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              SvgPicture.asset(
                weather.dailyForecasts.,
                width: 40,
                height: 40,
              ),
              const SizedBox(height: 8),
              Text(
                weather.day,
                style: const TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                  fontSize: 14,
                ),
              ),
              Text(
                '${weather.temperature.toStringAsFixed(1)}°C',
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                ),
              ),
              Text(
                weather.condition,
                style: const TextStyle(
                  color: Colors.white70,
                  fontSize: 12,
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Weekly Temperature Chart'),
        backgroundColor: Colors.blue.shade600,
        foregroundColor: Colors.white,
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [
              Colors.blue.shade50,
              Colors.blue.shade100,
            ],
          ),
        ),
        child: SingleChildScrollView(
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              children: [
                Card(
                  elevation: 4,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Max Daily Temperature',
                          style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                            color: Colors.blue.shade800,
                          ),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          'Tap on any point to see weather details',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey.shade600,
                          ),
                        ),
                        const SizedBox(height: 16),
                        SizedBox(
                          height: 300,
                          // --- MODIFICATION: Removed the Stack and LayoutBuilder ---
                          // We now use the chart's built-in 'annotations' feature.
                          child: SfCartesianChart(
                            primaryXAxis: const CategoryAxis(
                              labelStyle: TextStyle(
                                fontSize: 12,
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                            primaryYAxis: const NumericAxis(
                              minimum: 15,
                              maximum: 35,
                              interval: 5,
                              labelFormat: '{value}°C',
                              labelStyle: TextStyle(
                                fontSize: 12,
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                            tooltipBehavior: _tooltip,
                            plotAreaBorderWidth: 0,
                            // --- NEW: Use annotations to place icons on the chart ---
                            annotations: data.map((weather) {
                              return CartesianChartAnnotation(
                                // The widget to display as an annotation
                                widget: Container(
                                  width: 28,
                                  height: 28,
                                  decoration: BoxDecoration(
                                    color: Colors.white,
                                    shape: BoxShape.circle,
                                    boxShadow: [
                                      BoxShadow(
                                        color: Colors.black.withOpacity(0.2),
                                        blurRadius: 3,
                                        offset: const Offset(0, 1),
                                      ),
                                    ],
                                  ),
                                  child: Padding(
                                    padding: const EdgeInsets.all(3),
                                    child: SvgPicture.asset(weather.iconPath),
                                  ),
                                ),
                                // The data coordinate to place the widget at
                                coordinateUnit: CoordinateUnit.point,
                                x: weather.day,
                                y: weather.temperature,
                              );
                            }).toList(),
                            series: <CartesianSeries<WeatherForecast, String>>[
                              LineSeries<WeatherForecast, String>(
                                dataSource: data,
                                xValueMapper: (WeatherForecast weather, _) =>
                                weather.day,
                                yValueMapper: (WeatherForecast weather, _) =>
                                weather.temperature,
                                name: 'Temperature',
                                color: Colors.orange.shade600,
                                width: 3,
                                // --- MODIFICATION: Hide the original marker ---
                                // The annotation now serves as the visual marker.
                                // The line series itself remains tappable for tooltips.
                                markerSettings:
                                const MarkerSettings(isVisible: false),
                                dataLabelSettings: DataLabelSettings(
                                  isVisible: true,
                                  labelAlignment: ChartDataLabelAlignment.top,
                                  // --- MODIFICATION: Use a builder for robust positioning ---
                                  builder: (dynamic data, dynamic point,
                                      dynamic series, int pointIndex, int seriesIndex) {
                                    // Add padding to lift the label above our 28px icon annotation.
                                    return Padding(
                                      padding: const EdgeInsets.only(bottom: 30),
                                      child: Text(
                                        '${(data as WeatherForecast).temperature.toStringAsFixed(0)}°',
                                        style: const TextStyle(
                                          fontSize: 11,
                                          fontWeight: FontWeight.w500,
                                          color: Colors.black87,
                                        ),
                                      ),
                                    );
                                  },
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 16),
              ],
            ),
          ),
        ),
      ),
    );
  }


}

// class WeatherForecast {
//   WeatherForecast(this.day, this.temperature, this.condition, this.iconPath);
//
//   final String day;
//   final double temperature;
//   final String condition;
//   final String iconPath;
// }